import json

from aiogram import Dispatcher, types

from bot.functions.rights import is_Admin
from bot.handlers.logger import logger
from bot.keyboards.default import add_audio_list, add_favourites_audio_list, show_categories, vip_status_btns
from bot.objects import data


async def vip_status(query: types.CallbackQuery):
    text = "ü§© –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VIP —Å—Ç–∞—Ç—É—Å–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.\n\n" \
            "–ß—Ç–æ –¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞?\n" \
            "–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∏—Ç –≤—Å—é —Ä–µ–∫–ª–∞–º—É –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã + –¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø " \
            "–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∏—á–∞–µ–º –∞—É–¥–∏–æ —Å—Ç–∏–∫–µ—Ä–∞–º. –¢–µ–º —Å–∞–º—ã–º –≤—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ —Ä–∞–∑–≤–∏—Ç–∏–µ " \
            "–Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. –∞ –µ—â–µ –ø–æ–ª—É—á–∞–µ—Ç–µ –ª–∞–π–∫ –æ—Ç –∞–¥–º–∏–Ω–∞ ÔªøüòúÔªø\n" \
            "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
    await query.message.edit_text(text, reply_markup=vip_status_btns())


async def vip_status_free(query: types.CallbackQuery):
    user = data.get_user(query.from_user.id)
    text = "üòé –ü–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å –æ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞\n\n" \
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å VIP —Å—Ç–∞—Ç—É—Å –Ω–∞ –Ω–µ–¥–µ–ª—é, –ø—Ä–∏–≥–ª–∞—Å–∏–≤ 3 –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ:\n" \
            f"https://t.me/{(await query.bot.get_me())['username']}?start=bonus-{user['id']}\n\n" \
            f"–í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {user['friends']}\n\n" \
            "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º –∏ –∑–∞ –∫–∞–∂–¥—ã—Ö 3-—Ö –¥—Ä—É–∑–µ–π —Ç—ã –ø–æ–ª—É—á–∏—à—å VIP —Å—Ç–∞—Ç—É—Å –Ω–∞ –Ω–µ–¥–µ–ª—é" \
            "P.s. –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–¥–ª—è—é—Ç—Å—è"
    await query.message.edit_text(text, reply_markup=None)


async def change_category(query: types.CallbackQuery):
    await query.message.edit_text(
        "üòéÔªø–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è:\n\n"
        "–ü—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ üîç' ",
        reply_markup=show_categories()
)


async def chosen_change_category(query: types.CallbackQuery):
    action, category = query.data.split("|")
    user = data.get_user(query.from_user.id)
    user['category'] = category
    await query.answer(f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {category}")


async def audio_back(query: types.CallbackQuery):
    await query.answer()
    page = int(query.data.split("|")[1])
    if page == 0:
        return
    user_id = query.from_user.id
    user = data.get_user(user_id)
    audio_dict = data.data['audio'][user['category']]
    await query.message.edit_reply_markup(add_audio_list(user['category'], audio_dict, page))


async def audio_next(query: types.CallbackQuery):
    await query.answer()
    page = int(query.data.split("|")[1])
    if page == 0:
        return
    user_id = query.from_user.id
    user = data.get_user(user_id)
    audio_dict = data.data['audio'][user['category']]
    await query.message.edit_reply_markup(add_audio_list(user['category'], audio_dict, page))


async def audio_favourites_back(query: types.CallbackQuery):
    await query.answer()
    page = int(query.data.split("|")[1])
    if page == 0:
        return
    user_id = query.from_user.id
    user = data.get_user(user_id)
    await query.message.edit_reply_markup(add_favourites_audio_list(user, page))


async def audio_favourites_next(query: types.CallbackQuery):
    await query.answer()
    page = int(query.data.split("|")[1])
    if page == 0:
        return
    user_id = query.from_user.id
    user = data.get_user(user_id)
    await query.message.edit_reply_markup(add_favourites_audio_list(user, page))


async def ignore(query: types.CallbackQuery):
    await query.answer()


@is_Admin
async def send_log(message: types.Message):
    with open('logs.log', 'r') as logs:
        await message.reply_document(logs)


async def all_errors(update: types.Update, error):
    update_json = {}
    update_json = json.loads(update.as_json())
    if 'callback_query' in update_json.keys():
        await update.callback_query.answer('Error')
        chat_id = update.callback_query.from_user.id
        text = update.callback_query.data
    elif 'message' in update_json.keys():
        await update.message.answer('Error')
        chat_id = update.message.from_user.id
        text = update.message.text
    logger.error(str(chat_id) + ' ' + str(text) + ' ' + str(error), exc_info=True)


async def accept_join(request: types.ChatJoinRequest):
    await request.approve()


def register_handlers_secondary(dp: Dispatcher):
    dp.register_message_handler(send_log, commands="get_logfile", state="*")
    dp.register_errors_handler(all_errors)

    dp.register_chat_join_request_handler(accept_join)

    dp.register_callback_query_handler(
        vip_status,
        lambda c: c.data == "vip_status",
        state="*"
    )
    dp.register_callback_query_handler(
        vip_status_free,
        lambda c: c.data == "vip_status|free",
        state="*"
    )

    dp.register_callback_query_handler(
        change_category,
        lambda c: c.data == "change_category",
        state="*"
    )
    dp.register_callback_query_handler(
        chosen_change_category,
        lambda c: c.data.split("|")[0] == "change_category",
        state="*"
    )
    
    dp.register_callback_query_handler(
        audio_back,
        lambda c: c.data.split("|")[0] == "audio_back",
        state="*"
    )
    dp.register_callback_query_handler(
        audio_next,
        lambda c: c.data.split("|")[0] == "audio_next",
        state="*"
    )
    dp.register_callback_query_handler(
        audio_favourites_back,
        lambda c: c.data.split("|")[0] == "audio_favourites_back",
        state="*"
    )
    dp.register_callback_query_handler(
        audio_favourites_next,
        lambda c: c.data.split("|")[0] == "audio_favourites_next",
        state="*"
    )
    dp.register_callback_query_handler(
        ignore,
        lambda c: c.data == "ignore",
        state="*"
    )
